     1                                  bits 32 ;asamblare și compilare pentru arhitectura de 32 biți
     2                                  ; definim punctul de intrare in programul principal
     3                                  global start
     4                                  
     5                                  ; declaram functiile externe necesare programului nostru 
     6                                  extern exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
     7                                  import exit msvcrt.dll  ; exit este o functie care incheie procesul, este definita in msvcrt.dll
     8                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
     9                                          
    10                                  ; segmentul de date in care se vor defini variabilele 
    11                                  segment data use32 class=data
    12                                  ; ... 
    13 00000000 32147586BCAD                s dw 1432h, 8675h, 0ADBCh
    14                                      len equ ($-s) / 2
    15 00000006 1000                        base dw 16
    16 00000008 <res 0000000C>              d resd len
    17 00000014 <res 00000004>              temp resb 4
    18                                      
    19                                      
    20                                  ; segmentul de cod
    21                                  segment code use32 class=code
    22                                  start:
    23                                  ; ... 
    24 00000000 68[08000000]                push d
    25 00000005 B903000000                  mov ecx, len
    26 0000000A BE[00000000]                mov esi, s
    27                                      
    28                                      main_loop:
    29 0000000F 51                              push ecx
    30 00000010 66AD                            lodsw
    31 00000012 BF[14000000]                    mov edi, temp
    32 00000017 B904000000                      mov ecx, 4
    33                                          store_loop:
    34 0000001C BA00000000                          mov edx, 0
    35 00000021 66F735[06000000]                    DIV word[base]
    36 00000028 50                                  push eax
    37 00000029 88D0                                mov al, dl
    38 0000002B AA                                  stosb 
    39 0000002C 58                                  pop eax
    40 0000002D E2ED                            loop store_loop
    41                                          
    42 0000002F 56                              push esi
    43                                          
    44 00000030 B904000000                      mov ecx, 4
    45                                          bubble1:
    46 00000035 BE[14000000]                        mov esi, temp
    47 0000003A BF[15000000]                        mov edi, temp + 1
    48                                          
    49 0000003F 51                                  push ecx
    50 00000040 B903000000                          mov ecx, 3
    51                                              
    52                                              bubble2:
    53 00000045 A6                                      cmpsb
    54 00000046 7C08                                    jl switch_t
    55 00000048 4E                                      dec esi
    56 00000049 4F                                      dec edi
    57 0000004A 8A07                                    mov al, [edi]
    58 0000004C A4                                      movsb
    59 0000004D 8846FF                                  mov [esi - 1], al
    60                                                  
    61                                                  switch_t:
    62 00000050 E2F3                                loop bubble2
    63 00000052 59                                  pop ecx
    64 00000053 E2E0                            loop bubble1
    65                                          
    66 00000055 BE[14000000]                    mov esi, temp
    67 0000005A BB00000000                      mov ebx, 0
    68 0000005F B904000000                      mov ecx, 4
    69                                          merge:
    70 00000064 C1E008                              shl eax, 8
    71 00000067 AC                                  lodsb
    72 00000068 00C3                                add bl, al
    73                                              
    74 0000006A E2F8                            loop merge
    75                                          
    76 0000006C 5E                              pop esi
    77 0000006D 59                              pop ecx
    78 0000006E 5F                              pop edi
    79 0000006F AB                              stosd
    80 00000070 57                              push edi
    81                                          
    82 00000071 E29C                        loop main_loop
    83                                  
    84                                      ; exit(0)
    85 00000073 6A00                        push dword 0 ; se pune pe stiva parametrul functiei exit
    86 00000075 FF15[00000000]              call [exit] ; apelul functiei exit pentru terminarea executiei programului
