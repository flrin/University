     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf          ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll 
    11                                   ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 00000000                    a dd 0
    16 00000004 00000000                    b dd 0
    17 00000008 256420256400                format db "%d %d", 0
    18 0000000E 256400                      p_format db "%d", 0
    19                                      
    20 00000011 <res 00000004>              result resd 1
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 68[04000000]                    push b
    26 00000005 68[00000000]                    push a
    27 0000000A 68[08000000]                    push format
    28 0000000F FF15[00000000]                  call [scanf]
    29 00000015 83C40C                          add esp, 4*3
    30                                          
    31 00000018 A1[00000000]                    mov eax, [a]
    32 0000001D 66F73D[04000000]                idiv word[b]
    33 00000024 A3[11000000]                    mov [result], eax
    34                                          
    35 00000029 FF35[11000000]                  push dword[result]
    36 0000002F 68[0E000000]                    push p_format
    37 00000034 FF15[00000000]                  call [printf]
    38 0000003A 83C408                          add esp, 4 * 2
    39                                          
    40                                          ; exit(0)
    41 0000003D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 0000003F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
