     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, fopen, fclose, fread, fprintf, scanf         ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fopen msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import scanf msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 7465787431372E7478-         file_name dd "text17.txt", 0
    17 00000009 74000000000000     
    18 00000010 7700000000000000            acces_mode dd "w", 0
    19 00000018 <res 00000004>              file_descriptor resd 1
    20 0000001C 25642000                    format db "%d ", 0
    21 00000020 00000000                    num dd 0
    22 00000024 256400                      sformat db "%d", 0
    23 00000027 0700                        seven dw 7
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28 00000000 68[10000000]                    push acces_mode
    29 00000005 68[00000000]                    push file_name
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp, 4*2
    32                                          
    33 00000013 A3[18000000]                    mov [file_descriptor], eax
    34 00000018 B901000000                      mov ecx, 1
    35                                          loop_1:
    36 0000001D 68[20000000]                        push num
    37 00000022 68[24000000]                        push sformat
    38 00000027 FF15[00000000]                      call [scanf]
    39 0000002D 83C408                              add esp, 4 * 2
    40                                              
    41 00000030 66833D[20000000]00                  cmp [num], word 0
    42 00000038 742F                                jz end
    43 0000003A A1[20000000]                            mov eax, [num]
    44 0000003F 66F735[27000000]                        div word[seven]
    45 00000046 6683FA00                                cmp dx, word 0
    46 0000004A 751A                                    jnz skip
    47 0000004C FF35[20000000]                              push dword[num]
    48 00000052 68[1C000000]                                push format
    49 00000057 FF35[18000000]                              push dword[file_descriptor]
    50 0000005D FF15[00000000]                              call [fprintf]
    51 00000063 83C40C                                      add esp, 4 * 3
    52                                              skip:
    53 00000066 41                                  inc ecx
    54 00000067 E2B4                            loop loop_1
    55                                          end:
    56                                          
    57                                          
    58 00000069 FF35[18000000]                  push dword[file_descriptor]
    59 0000006F FF15[00000000]                  call [fclose]
    60 00000075 83C404                          add esp, 4 * 1
    61                                      
    62                                          ; exit(0)
    63 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
